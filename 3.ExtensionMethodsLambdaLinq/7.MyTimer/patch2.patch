Index: 7.Timer.csproj
===================================================================
--- 7.Timer.csproj	(revision 0)
+++ 7.Timer.csproj	(working copy)
@@ -0,0 +1,59 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{E7D7ACAC-8B03-4210-B6A4-B0C0A628458B}</ProjectGuid>
+    <OutputType>Exe</OutputType>
+    <AppDesignerFolder>Properties</AppDesignerFolder>
+    <RootNamespace>Timer</RootNamespace>
+    <AssemblyName>Timer</AssemblyName>
+    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
+    <FileAlignment>512</FileAlignment>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugSymbols>true</DebugSymbols>
+    <DebugType>full</DebugType>
+    <Optimize>false</Optimize>
+    <OutputPath>bin\Debug\</OutputPath>
+    <DefineConstants>DEBUG;TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+    <PlatformTarget>AnyCPU</PlatformTarget>
+    <DebugType>pdbonly</DebugType>
+    <Optimize>true</Optimize>
+    <OutputPath>bin\Release\</OutputPath>
+    <DefineConstants>TRACE</DefineConstants>
+    <ErrorReport>prompt</ErrorReport>
+    <WarningLevel>4</WarningLevel>
+  </PropertyGroup>
+  <ItemGroup>
+    <Reference Include="System" />
+    <Reference Include="System.Core" />
+    <Reference Include="System.Xml.Linq" />
+    <Reference Include="System.Data.DataSetExtensions" />
+    <Reference Include="Microsoft.CSharp" />
+    <Reference Include="System.Data" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="MyTimer.cs" />
+    <Compile Include="TimerTest.cs" />
+    <Compile Include="Properties\AssemblyInfo.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <None Include="App.config" />
+  </ItemGroup>
+  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
+       Other similar extension points exist, see Microsoft.Common.targets.
+  <Target Name="BeforeBuild">
+  </Target>
+  <Target Name="AfterBuild">
+  </Target>
+  -->
+</Project>
\ No newline at end of file
Index: App.config
===================================================================
--- App.config	(revision 0)
+++ App.config	(working copy)
@@ -0,0 +1,6 @@
+﻿<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+    <startup> 
+        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
+    </startup>
+</configuration>
\ No newline at end of file
Index: MyTimer.cs
===================================================================
--- MyTimer.cs	(revision 0)
+++ MyTimer.cs	(working copy)
@@ -0,0 +1,32 @@
+﻿using System;
+using System.Threading;
+using System.Linq;
+
+
+namespace Timer
+{   
+    public static class MyTimer<T>
+    {
+        
+        /// <summary>
+        /// Runs functions in delegate with a delay of seconds
+        /// </summary>
+        /// <param name="delay">seconds</param>
+        /// <param name="deleg">Delagete</param>
+        /// <param name="paramsForDelegate"></param>
+        public static void RunThis(int delay,Delegate deleg,T paramsForDelegate)
+        {               
+            deleg.DynamicInvoke(paramsForDelegate);
+            Console.WriteLine("timer repeats every {0} seconds", delay);
+            Console.WriteLine("--Press any key to exit--");
+
+            Thread.Sleep(delay * 1000);    
+            
+            if (Console.KeyAvailable)
+            {    
+                return;                
+            }
+            MyTimer<T>.RunThis(delay, deleg,paramsForDelegate);
+        }
+    }
+}
Index: Properties/AssemblyInfo.cs
===================================================================
--- Properties/AssemblyInfo.cs	(revision 0)
+++ Properties/AssemblyInfo.cs	(working copy)
@@ -0,0 +1,36 @@
+﻿using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following 
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("8.Timer")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("8.Timer")]
+[assembly: AssemblyCopyright("Copyright ©  2013")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible 
+// to COM components.  If you need to access a type in this assembly from 
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("cd091bea-f714-4cb4-b4b4-1bdfdaac3371")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version 
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers 
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
Index: TimerTest.cs
===================================================================
--- TimerTest.cs	(revision 0)
+++ TimerTest.cs	(working copy)
@@ -0,0 +1,25 @@
+﻿using System;
+using System.Linq;
+
+namespace Timer
+{
+    class TimerTest
+    {
+        delegate void OneParamDelagate<T>(T param);
+
+        static void Print(string mes)
+        {
+            Console.WriteLine(mes);
+        }
+        
+        static void Main(string[] args)
+        {
+            OneParamDelagate<string> myDelegate = Print;
+            myDelegate += delegate(string param)
+                {
+                    Console.WriteLine("this is a time delay");
+                };
+            MyTimer<string>.RunThis(2, myDelegate,"Test string.....\n------------");
+        }
+    }
+}
